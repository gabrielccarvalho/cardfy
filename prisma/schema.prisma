generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  plan          String      @default("FREE")
  accounts      Account[]
  sessions      Session[]
  flashcards    Flashcard[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id          String    @id @default(cuid())
  date        DateTime
  flashcardId String
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
}

model Flashcard {
  id               String   @id @default(cuid())
  question         String
  answer           String
  slug             String
  extraInformation String?
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interval         Float    @default(1)
  repetitions      Int      @default(0)
  easeFactor       Float    @default(2.5)
  nextReviewDate   DateTime @default(now())
  reviews          Review[]

  @@index([categoryId])
  @@index([userId])
}

model Category {
  id             String      @id @default(cuid())
  name           String
  description    String?
  flashcards     Flashcard[]
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId       String?
  parentCategory Category?   @relation("CategorySubcategories", fields: [parentId], references: [id])
  subCategories  Category[]  @relation("CategorySubcategories")

  @@index([userId])
}
