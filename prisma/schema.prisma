generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  plan          String      @default("FREE")
  accounts      Account[]
  sessions      Session[]
  flashcards    Flashcard[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flashcard {
  id             String   @id @default(cuid())
  question       String
  answer         String
  slug           String
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interval       Float    @default(1)
  repetitions    Int      @default(0)
  easeFactor     Float    @default(2.5)
  nextReviewDate DateTime @default(now())

  @@index([categoryId])
  @@index([userId])
}

model Category {
  id          String      @id @default(cuid())
  name        String
  description String?
  flashcards  Flashcard[]
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
